buildscript {
	ext {
		springBootVersion = '1.5.7.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id "com.moowork.node" version "1.2.0" apply false
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'kuina.spring_webpack'
version = '0.0.1'
sourceCompatibility = 1.8
gradle.taskGraph.whenReady { taskGraph ->
	if (taskGraph.hasTask(release)) {
		version = version + '-SNAPSHOT'
	}
}


def frontProject = project('front')

sourceSets.main.resources {
	srcDirs = [
		projectDir.toPath().resolve('src/main/resources').toString(),
		frontProject.projectDir.toPath().resolve('dist').toString()
	]
}
gradle.taskGraph.whenReady { taskGraph ->
	if (taskGraph.hasTask(release)) {
		// exclude source maps
		sourceSets.main.resources {
			exclude '**/*.map'
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jdk8
	compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8' //, version: '2.9.0'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310
	compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310' //, version: '2.9.0'

	def thymeleafVersion = '3.0.7.RELEASE'
	// https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4
	compile group: 'org.thymeleaf', name: 'thymeleaf-spring4', version: thymeleafVersion
	// https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf
	compile group: 'org.thymeleaf', name: 'thymeleaf', version: thymeleafVersion

	// compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')

	runtime('org.springframework.boot:spring-boot-devtools')

	compileOnly('org.projectlombok:lombok')

	testCompile('org.springframework.boot:spring-boot-starter-test')
}


project(frontProject.name) {
	apply plugin: 'com.moowork.node'

	// use Yarn instead of npm
	npmInstall.enabled = false
}


task prepare(dependsOn: [frontProject.yarn_install, ':eclipse']) {
}

task buildFront(dependsOn: frontProject.npm_run_build) {
	mustRunAfter prepare
}

bootRepackage.mustRunAfter buildFront

task runJar(type: Exec) {
	mustRunAfter bootRepackage
	workingDir buildDir.toPath().resolve('libs').toString()
	doFirst {
		println 'Open http://localhost:8080/actual-ctx/foo/'
		println 'or http://localhost:8080/actual-ctx/foo/create'
	}
	commandLine 'java', '-jar',
			jar.baseName + '-' + version + '.jar'
}

task flashRun(dependsOn: [
	prepare,
	buildFront,
	bootRepackage,
	runJar
]) {
}

task release(dependsOn: bootRepackage) {
}
